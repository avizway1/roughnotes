CI/CD Tool

Continuous Integration (CI) and Continuous Delivery/Deployment (CD):


Delivery : A manual Step/action included
Deploy : No manaual step/action in the process

Jenkins help us to Automate the "Testings", "Builds" and "Deployment process".

2004 --> Kawaguchi developed hudson as a open-source tool for sun-microsystem.

2010 --> dispite between Hudson and oracle (acquired sun-micro)... Foked the project and renamed as "jenkins"

Jenkins community, Rich in plugin, good support

https://docs.aws.amazon.com/corretto/latest/corretto-21-ug/downloads-list.html


dnf install java-21-amazon-corretto -y

dnf install jenkins -y

systemctl start jenkins
systemctl enable jenkins

systemctl enable jenkins --now

---

Variables in Jenkins Projects/Pipelines/Items:

Local varibales : Works with in a job/item.

NAME=Avinash
SUBJECT=Jenkins
echo "Hello from $NAME, you are learning ${SUBJECT}"

System level varibales : We can add varibales at system level and we can use at any job/item.

ENV
PROJECT
SUBJECT


echo "Hello, you are working on $ENV Environment, on $PROJECT subject to learn $SUBJECT"

Hello, you are working on Production Environment, on Project-CICD subject to learn DevOps

If we have "system vas" and Local Vars.. Local variables will have priority.

---

Jenkins Variables : 

http://jenkins-svr-ip:8080/env-vars.html/


echo "hello this job name is $JOB_NAME This job is running in $NODE_NAME, We are testing this on $JENKINS_URL and Build id is $BUILD_ID"

hello this job name is jen-var-test This job is running in built-in, We are testing this on http://0.0.0.0:8080/ and Build id is 1


---

Build Options in Jenkins:

Build Periodically : Configure a Cron and jenkins performs the build based on the schedule.

Poll SCM : Same as build periodically only, but has intelligence.. It will prepare a build if any changes commited duting period.



http://65.2.130.146:8080/github-webhook/

---

Maven : 

pom .xml pom.xml (Project Object Model)

--> Manages the dependencies
--> Standardise the build process
--> We can use with CICD pipelines for build automation


---
JAR File (Java ARchieve) : 
.class files
--> Packaging a standalone java application, we can use this jar.

java -jar /path-to-jar/sample.jar


.
├── pom.xml
└── src
    ├── main
    │   └── java
    │       └── mydemo
    │           └── App.java
    └── test
        └── java
            └── mydemo
                └── AppTest.java

7 directories, 3 files

---


.
├── pom.xml
├── src
│   ├── main
│   │   └── java
│   │       └── mydemo
│   │           └── App.java
│   └── test
│       └── java
│           └── mydemo
│               └── AppTest.java
└── target
    ├── classes
    │   └── mydemo
    │       └── App.class
    ├── generated-sources
    │   └── annotations
    └── maven-status
        └── maven-compiler-plugin
            └── compile
                └── default-compile
                    ├── createdFiles.lst
                    └── inputFiles.lst

16 directories, 6 files

---


.
├── pom.xml
├── src
│   ├── main
│   │   └── java
│   │       └── mydemo
│   │           └── App.java
│   └── test
│       └── java
│           └── mydemo
│               └── AppTest.java
└── target
    ├── avinash-1.0-SNAPSHOT.jar
    ├── classes
    │   └── mydemo
    │       └── App.class
    ├── generated-sources
    │   └── annotations
    ├── generated-test-sources
    │   └── test-annotations
    ├── maven-archiver
    │   └── pom.properties
    ├── maven-status
    │   └── maven-compiler-plugin
    │       ├── compile
    │       │   └── default-compile
    │       │       ├── createdFiles.lst
    │       │       └── inputFiles.lst
    │       └── testCompile
    │           └── default-testCompile
    │               ├── createdFiles.lst
    │               └── inputFiles.lst
    ├── surefire-reports
    │   ├── TEST-mydemo.AppTest.xml
    │   └── mydemo.AppTest.txt
    └── test-classes
        └── mydemo
            └── AppTest.class

24 directories, 13 files



---


[INFO] Installing 
/home/ec2-user/avinash/pom.xml to /root/.m2/repository/mydemoproj/avinash/1.0-SNAPSHOT/avinash-1.0-SNAPSHOT.pom

[INFO] Installing /home/ec2-user/avinash/target/avinash-1.0-SNAPSHOT.jar to /root/.m2/repository/mydemoproj/avinash/1.0-SNAPSHOT/avinash-1.0


---

mvn clean

---

mvn clean install package


---


find / -name context.xml

vim /opt/apache-tomcat-10.1.44/webapps/host-manager/META-INF/context.xml
vim /opt/apache-tomcat-10.1.44/webapps/manager/META-INF/context.xml


---


vim /opt/apache-tomcat-10.1.44/conf/tomcat-users.xml

tomcat
s3cret


<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<role rolename="manager-jmx"/>
<role rolename="manager-status"/>
<role rolename="admin-gui"/>
<user username="tomcat" password="Avinash" roles="manager-gui,manager-script,manager-jmx,manager-status,admin-gui"/>


---

Create a softlink with a string to perform easy start and stop operation..


ln -s /opt/apache-tomcat-10.1.44/bin/startup.sh /usr/bin/tomcatstart
ln -s /opt/apache-tomcat-10.1.44/bin/shutdown.sh /usr/bin/tomcatstop


---



pipeline























